// Sayfa yüklendiğinde çalışacak fonksiyon
document.addEventListener('DOMContentLoaded', function() {
  // DOM elementlerini seçme
  const scanButton = document.getElementById('scanPage');
  const aiSuggestionButton = document.getElementById('showAiSuggestion');
  const vulnerabilityList = document.getElementById('vulnerabilityList');
  const suggestionContainer = document.getElementById('suggestionContainer');
  const suggestionContent = document.getElementById('suggestionContent');
  
  // Tespit edilen açıklıkları saklayacak dizi
  let detectedVulnerabilities = [];
  
  // Sayfayı Tara butonuna tıklama olayı
  scanButton.addEventListener('click', function() {
    // Tarama başladığında liste temizlenir
    vulnerabilityList.innerHTML = '<p class="scanning-message">Taranıyor...</p>';
    
    // AI öneri butonunu devre dışı bırak
    aiSuggestionButton.disabled = true;
    
    // Öneri konteynerini gizle
    suggestionContainer.classList.add('hidden');
    
    // Content script'e tarama mesajı gönder
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      chrome.tabs.sendMessage(tabs[0].id, {action: "scanPage"}, function(response) {
        if (chrome.runtime.lastError) {
          // Hata durumunda kullanıcıya bilgi ver
          vulnerabilityList.innerHTML = '<p class="empty-message">Hata: Sayfa taranamadı. Sayfayı yenileyin ve tekrar deneyin.</p>';
          return;
        }
        
        // Yanıt alındığında
        if (response && response.vulnerabilities) {
          detectedVulnerabilities = response.vulnerabilities;
          displayVulnerabilities(detectedVulnerabilities);
          
          // Açıklık bulunduysa AI öneri butonunu aktif et
          aiSuggestionButton.disabled = detectedVulnerabilities.length === 0;
        } else {
          vulnerabilityList.innerHTML = '<p class="empty-message">Açıklık bulunamadı veya sayfa taranamadı.</p>';
        }
      });
    });
  });
  
  // AI Önerisi Göster butonuna tıklama olayı
  aiSuggestionButton.addEventListener('click', function() {
    // Öneri konteynerini göster
    suggestionContainer.classList.remove('hidden');
    
    // Tespit edilen açıklıklara göre öneriler oluştur
    const suggestions = generateSuggestions(detectedVulnerabilities);
    suggestionContent.innerHTML = suggestions;
  });
  
  // Açıklıkları ekranda gösterme fonksiyonu
  function displayVulnerabilities(vulnerabilities) {
    if (vulnerabilities.length === 0) {
      vulnerabilityList.innerHTML = '<p class="empty-message">Açıklık bulunamadı.</p>';
      return;
    }
    
    vulnerabilityList.innerHTML = '';
    
    vulnerabilities.forEach(function(vuln) {
      const vulnElement = document.createElement('div');
      vulnElement.className = `vulnerability-item ${vuln.severity}`;
      
      const titleElement = document.createElement('div');
      titleElement.className = 'vulnerability-title';
      titleElement.textContent = vuln.title;
      
      const detailsElement = document.createElement('div');
      detailsElement.className = 'vulnerability-details';
      detailsElement.textContent = vuln.details;
      
      vulnElement.appendChild(titleElement);
      vulnElement.appendChild(detailsElement);
      vulnerabilityList.appendChild(vulnElement);
    });
  }
  
  // Açıklık türüne göre öneri metinleri oluşturma fonksiyonu
  function generateSuggestions(vulnerabilities) {
    if (vulnerabilities.length === 0) {
      return '<p>Öneri göstermek için önce bir açıklık tespit edilmelidir.</p>';
    }
    
    let suggestionsHTML = '<ul>';
    
    // Her açıklık türü için özel öneri metni
    const suggestionMap = {
      'xss_innerHTML': 'innerHTML yerine textContent veya innerText kullanın. Kullanıcı girdisini DOMPurify gibi kütüphanelerle sanitize edin.',
      'xss_eval': 'eval() kullanımından kaçının. Alternatif olarak daha güvenli yöntemler kullanın.',
      'xss_document_write': 'document.write() kullanımından kaçının. Modern DOM manipülasyon yöntemlerini tercih edin.',
      'insecure_cookie': 'Cookie\'lerde Secure ve HttpOnly bayraklarını kullanın. Secure bayrağı cookie\'nin sadece HTTPS üzerinden gönderilmesini sağlar.',
      'password_field': 'Şifre alanlarının güvenliğini artırın. Autocomplete=off özelliğini ekleyin ve HTTPS kullanın.'
    };
    
    // Benzersiz açıklık türlerini topla
    const uniqueVulnTypes = [...new Set(vulnerabilities.map(v => v.type))];
    
    // Her bir açıklık türü için öneri ekle
    uniqueVulnTypes.forEach(type => {
      if (suggestionMap[type]) {
        suggestionsHTML += `<li><strong>${vulnerabilities.find(v => v.type === type).title}:</strong> ${suggestionMap[type]}</li>`;
      }
    });
    
    suggestionsHTML += '</ul>';
    return suggestionsHTML;
  }
  
  // Background script'ten gelen mesajları dinle
  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.action === "vulnerabilitiesDetected") {
      detectedVulnerabilities = request.vulnerabilities;
      displayVulnerabilities(detectedVulnerabilities);
      
      // Açıklık bulunduysa AI öneri butonunu aktif et
      aiSuggestionButton.disabled = detectedVulnerabilities.length === 0;
    }
  });
});
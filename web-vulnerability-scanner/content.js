// Web sayfasındaki güvenlik açıklarını tespit eden content script

// Tespit edilen açıklıkları saklayacak dizi
let vulnerabilities = [];

// Popup'tan gelen mesajları dinle
chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  if (request.action === "scanPage") {
    // Sayfayı tara
    scanPage();
    
    // Sonuçları popup'a gönder
    sendResponse({vulnerabilities: vulnerabilities});
    return true; // Asenkron yanıt için gerekli
  }
});

// Sayfayı tarama fonksiyonu
function scanPage() {
  vulnerabilities = []; // Önceki sonuçları temizle
  
  // XSS açıklıklarını kontrol et
  checkForXSSVulnerabilities();
  
  // Cookie güvenliğini kontrol et
  checkCookieSecurity();
  
  // Şifre alanlarını kontrol et
  checkPasswordFields();
  
  // Sonuçları background script'e gönder
  chrome.runtime.sendMessage({
    action: "vulnerabilitiesDetected",
    vulnerabilities: vulnerabilities
  });
}

// XSS açıklıklarını kontrol eden fonksiyon
function checkForXSSVulnerabilities() {
  // Sayfa kaynak kodunu al
  const pageSource = document.documentElement.outerHTML;
  
  // innerHTML kullanımını kontrol et
  if (pageSource.includes('.innerHTML') || pageSource.match(/innerHTML\s*=/)) {
    vulnerabilities.push({
      title: 'Potansiyel XSS Açığı (innerHTML)',
      details: 'Sayfada innerHTML kullanımı tespit edildi. Bu, kullanıcı girdisi ile birlikte kullanıldığında XSS açığına neden olabilir.',
      type: 'xss_innerHTML',
      severity: 'high'
    });
  }
  
  // eval() kullanımını kontrol et
  if (pageSource.includes('eval(') || pageSource.match(/eval\s*\(/)) {
    vulnerabilities.push({
      title: 'Potansiyel XSS Açığı (eval)',
      details: 'Sayfada eval() fonksiyonu kullanımı tespit edildi. Bu, kullanıcı girdisi ile birlikte kullanıldığında XSS açığına neden olabilir.',
      type: 'xss_eval',
      severity: 'high'
    });
  }
  
  // document.write kullanımını kontrol et
  if (pageSource.includes('document.write(') || pageSource.match(/document\.write\s*\(/)) {
    vulnerabilities.push({
      title: 'Potansiyel XSS Açığı (document.write)',
      details: 'Sayfada document.write() fonksiyonu kullanımı tespit edildi. Bu, kullanıcı girdisi ile birlikte kullanıldığında XSS açığına neden olabilir.',
      type: 'xss_document_write',
      severity: 'medium'
    });
  }
  
  // Script etiketlerini incele
  const scripts = document.querySelectorAll('script');
  scripts.forEach(script => {
    const scriptContent = script.textContent;
    if (scriptContent) {
      // İlave XSS kontrolleri yapılabilir
      // Örneğin, dinamik script oluşturma, setTimeout/setInterval ile eval benzeri kullanım vb.
    }
  });
}

// Cookie güvenliğini kontrol eden fonksiyon
function checkCookieSecurity() {
  const cookies = document.cookie.split(';');
  
  if (cookies.length > 0 && cookies[0] !== '') {
    // HTTPS kontrolü
    const isSecureConnection = window.location.protocol === 'https:';
    
    // Cookie'lerde Secure ve HttpOnly bayraklarını kontrol et
    let hasInsecureCookies = false;
    
    // Basit bir kontrol - gerçek dünyada daha karmaşık olabilir
    // HttpOnly bayrağını client-side'dan kontrol etmek zor olduğundan
    // burada sadece Secure bayrağı için basit bir kontrol yapıyoruz
    if (!isSecureConnection) {
      hasInsecureCookies = true;
    }
    
    if (hasInsecureCookies) {
      vulnerabilities.push({
        title: 'Güvensiz Cookie Kullanımı',
        details: 'Sayfada güvenli olmayan cookie kullanımı tespit edildi. Cookie\'lerde Secure veya HttpOnly bayrakları eksik olabilir.',
        type: 'insecure_cookie',
        severity: 'medium'
      });
    }
  }
}

// Şifre alanlarını kontrol eden fonksiyon
function checkPasswordFields() {
  // Şifre input alanlarını bul
  const passwordFields = document.querySelectorAll('input[type="password"]');
  
  passwordFields.forEach(field => {
    const fieldName = field.name || '';
    const fieldId = field.id || '';
    
    // Şifre alanı adı veya ID'sinde "password" içeriyorsa not et
    if (fieldName.toLowerCase().includes('password') || fieldId.toLowerCase().includes('password')) {
      // HTTPS kontrolü
      const isSecureConnection = window.location.protocol === 'https:';
      
      if (!isSecureConnection) {
        vulnerabilities.push({
          title: 'Güvensiz Şifre Alanı',
          details: 'HTTP üzerinden şifre alanı tespit edildi. Şifre alanları her zaman HTTPS üzerinden kullanılmalıdır.',
          type: 'password_field',
          severity: 'high'
        });
      }
      
      // Autocomplete kontrolü
      if (field.autocomplete !== 'off') {
        vulnerabilities.push({
          title: 'Şifre Alanı Güvenlik Önerisi',
          details: 'Şifre alanında autocomplete="off" özelliği eksik. Bu, tarayıcının şifreyi kaydetmesine izin verebilir.',
          type: 'password_field',
          severity: 'low'
        });
      }
    }
  });
}

// Sayfa yüklendiğinde otomatik tarama yapma (isteğe bağlı)
// document.addEventListener('DOMContentLoaded', scanPage);
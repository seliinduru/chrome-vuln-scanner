// popup.js
// popup ile background / content arasında haberleşme, UI render

const scanBtn = document.getElementById('scanBtn');
const reportBtn = document.getElementById('reportBtn');
const exportJsonBtn = document.getElementById('exportJson');
const exportCsvBtn = document.getElementById('exportCsv');
const vulnList = document.getElementById('vulnList');
const statusText = document.getElementById('statusText');

let currentVulns = [];
let currentFilter = 'all';
let filterSettings = null;

// Sekmeler arası geçiş
document.querySelectorAll('.tab').forEach(t =>
  t.addEventListener('click', (e) => {
    document.querySelectorAll('.tab').forEach(x => x.classList.remove('active'));
    e.target.classList.add('active');
    const tab = e.target.dataset.tab;

    if (tab === 'settings') {
      window.location.href = 'settings.html';
      return;
    }

    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
    document.getElementById(tab).classList.add('active');
  })
);

// Filtre butonları
document.querySelectorAll('.filter').forEach(btn => {
  btn.addEventListener('click', (e) => {
    document.querySelectorAll('.filter').forEach(x => x.classList.remove('active'));
    e.target.classList.add('active');
    currentFilter = e.target.dataset.sev;
    renderVulns();
  });
});

// Tarama başlatma
scanBtn.addEventListener('click', async () => {
  setStatus('Taranıyor...');
  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
    const tab = tabs[0];
    if (!tab || !tab.id) {
      setStatus('Aktif sekme bulunamadı');
      return;
    }

    chrome.tabs.sendMessage(tab.id, { action: 'scanPage' }, (response) => {
      if (chrome.runtime.lastError) {
        console.warn('sendMessage error', chrome.runtime.lastError);
        setStatus('İçerik scripti yüklü değil');
        getVulnsFromBackground();
        return;
      }

      if (response && response.vulnerabilities) {
        currentVulns = response.vulnerabilities || [];
        chrome.runtime.sendMessage({ action: 'vulnerabilitiesDetected', vulnerabilities: currentVulns });
        renderVulns();
        setStatus(`Tarandı — ${currentVulns.length} açık bulundu`);
      } else {
        getVulnsFromBackground();
      }
    });
  });
});

// Rapor oluşturma
reportBtn.addEventListener('click', () => {
  if (!currentVulns.length) {
    alert('Rapor oluşturmak için önce tarama yapın.');
    return;
  }
  const blob = new Blob([JSON.stringify(currentVulns, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  chrome.downloads
    ? chrome.downloads.download({ url, filename: 'wg_report.json' })
    : window.open(url);
});

// JSON dışa aktar
exportJsonBtn.addEventListener('click', () => {
  if (!currentVulns.length) {
    alert('Dışa aktarmak için önce tarama yapın.');
    return;
  }
  const dataStr = JSON.stringify(currentVulns, null, 2);
  downloadBlob(dataStr, 'application/json', 'wg_vulnerabilities.json');
});

// CSV dışa aktar
exportCsvBtn.addEventListener('click', () => {
  if (!currentVulns.length) {
    alert('Dışa aktarmak için önce tarama yapın.');
    return;
  }
  const csv = toCsv(currentVulns);
  downloadBlob(csv, 'text/csv', 'wg_vulnerabilities.csv');
});

// Background'dan veri al
function getVulnsFromBackground() {
  chrome.runtime.sendMessage({ action: 'getVulns' }, (resp) => {
    if (resp && resp.vulnerabilities) {
      currentVulns = resp.vulnerabilities;
      renderVulns();
      setStatus(`Son kayıt yüklendi — ${currentVulns.length} açık`);
    } else {
      currentVulns = [];
      renderVulns();
      setStatus('Henüz tarama yapılmadı');
    }
  });
}

// Render
function renderVulns() {
  chrome.storage.local.get('scannerSettings', (result) => {
    filterSettings = result.scannerSettings || {
      severity: ['high', 'medium', 'low'],
      vulnTypes: ['xss', 'sqli', 'csrf', 'other'],
      scanOptions: ['passive']
    };

    let filtered = currentVulns.filter(v => {
      if (!v) return false;
      if (currentFilter === 'all') return true;
      return (v.severity || '').toLowerCase() === currentFilter;
    });

    if (filterSettings) {
      if (filterSettings.severity?.length)
        filtered = filtered.filter(v => filterSettings.severity.includes(v.severity));

      if (filterSettings.vulnTypes?.length)
        filtered = filtered.filter(v => {
          if (!v.type && filterSettings.vulnTypes.includes('other')) return true;
          return filterSettings.vulnTypes.includes(v.type);
        });
    }

    vulnList.innerHTML = '';
    if (!filtered.length) {
      vulnList.classList.add('empty');
      vulnList.innerHTML = `<div class="empty-state"><p>Bu filtreye uygun açık bulunamadı.</p></div>`;
      return;
    }

    vulnList.classList.remove('empty');
    const ul = document.createElement('div');
    ul.className = 'vuln-items';

    filtered.forEach(v => {
      const card = document.createElement('div');
      card.className = 'vuln-item';

      const sev = (v.severity || 'medium').toLowerCase();
      const sevBadge = document.createElement('span');
      sevBadge.className = `sev ${sev}`;
      sevBadge.textContent = sev === 'high' ? 'Yüksek' : sev === 'medium' ? 'Orta' : sev === 'low' ? 'Düşük' : sev;

      const title = document.createElement('div');
      title.className = 'vuln-title';
      title.textContent = v.title || '(başlık yok)';

      const details = document.createElement('div');
      details.className = 'vuln-details';
      details.textContent = v.details || '';

      const meta = document.createElement('div');
      meta.className = 'vuln-meta';
      meta.innerHTML = `<small>Tip: ${v.type || '-'} | ID: ${v.id || '-'}</small>`;

      card.append(sevBadge, title, details, meta);

      if (v.evidence) {
        const evidBtn = document.createElement('button');
        evidBtn.className = 'evidence-btn';
        evidBtn.textContent = 'Detay';
        const evidPanel = document.createElement('pre');
        evidPanel.className = 'evidence-panel';
        evidPanel.textContent = typeof v.evidence === 'string'
          ? v.evidence
          : JSON.stringify(v.evidence, null, 2);

        evidBtn.addEventListener('click', () => {
          evidPanel.classList.toggle('visible');
        });

        card.append(evidBtn, evidPanel);
      }

      ul.appendChild(card);
    });

    vulnList.appendChild(ul);
  });
}

// CSV dönüştürücü
function toCsv(arr) {
  if (!arr?.length) return '';
  const headers = ['id', 'title', 'details', 'type', 'severity', 'evidence'];
  const lines = [headers.join(',')];

  arr.forEach(item => {
    const row = headers.map(h => {
      let v = item[h];
      if (v == null) return '""';
      if (typeof v === 'object') v = JSON.stringify(v);
      v = String(v).replace(/"/g, '""');
      return `"${v}"`;
    });
    lines.push(row.join(','));
  });

  return lines.join('\n');
}

// Dosya indirme
function downloadBlob(content, mime, filename) {
  const blob = new Blob([content], { type: mime });
  const url = URL.createObjectURL(blob);
  if (chrome.downloads) {
    chrome.downloads.download({ url, filename }, () => URL.revokeObjectURL(url));
  } else {
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  }
}

// Durum yazısı
function setStatus(s) {
  if (statusText) statusText.textContent = s;
}

// Sayfa açıldığında
document.addEventListener('DOMContentLoaded', () => {
  chrome.storage.local.get('scannerSettings', (result) => {
    filterSettings = result.scannerSettings || {
      severity: ['high', 'medium', 'low'],
      vulnTypes: ['xss', 'sqli', 'csrf', 'other'],
      scanOptions: ['passive']
    };
  });

  getVulnsFromBackground();

  const scanOnLoad = document.getElementById('scanOnLoad');
  if (scanOnLoad) {
    scanOnLoad.addEventListener('change', (e) => {
      chrome.storage.local.set({ scanOnPageLoad: e.target.checked });
    });
  }
});
